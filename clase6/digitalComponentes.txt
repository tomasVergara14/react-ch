

        *** Componentes II ***

Un componente es un bloque de codigo que permite ser reutilizable

una Props es un componente de React valido porque acepta un solo argumento de objeto "props" (propiedades) con

datos y devuelve un elemento de React

Son componentes funcionales porque son funciones de JS

Nos permite retornar componentes con contenido dinamico de acuerdo al valor de sus propiedades

    ex:

            function Bienvenidos (props){

                return{
                    <>
                        <h1>Hola, {props.nombre} </h1>
                    </>
                }
            }


Las propiedades de un componente reciben sus respectivos valores cuando el componente es invocado por la app

    ex:

            <Bienvenidos
            nombre = "Luis Victorio" />

React trata a los componentes que comienzan con minusculas como etiquetas del DOM, pero los que comienzan con 

mayusculas los toma como que representan un componente del DOM 





        *** Key, Props, Map() ***

Podemos pasar informacion de un array, colocando el atributo entre llaves, nos permiten escribir datos que no sean

simplemente cadenas de texto

    ex: 
            const usuarios = ["tomi", "tortu", "chico"]

            <MiLista
            items= {usuarios} />


Aca se esta pasando al componente MiLista, los usuarios que se encuentran en el array usuarios y los mismos son 

asignados a la variable items



Lo primero es recibir dentro, del componente, las props. En la estructura JSX, luego se va a poder iterar sobre el

array recibido para imprimir el usuario.

    ex:
            function MiLista(props){

                return(
                    <ol>
                        {items.map( item=> <li> {item} </li>)}
                    </ol>
                )
            }

Conviene utilizar el metodo map() para iterar sobre el array e imprimir su contenido

Siempre es recomendable utilizar las "key" en el metodo map()

ayudan a react a identificar que elementos han cambiado, agregado o eliminado.

La key debe ser unica entre elementos hermanos, no se muestran por HTML 


Las Key son necesarias cuando se renderizan varios elementos del mismo tipo que necesitan de un valor unico

    ex:
            function MiLista(props){

                return(
                    <ol>
                        {items.map( (item, i)=> <li key={u + i} > {item } </li>)}
                    </ol>
                )
            }





        *** PropTypes DefaultProps ***


Se puede capturar una gran cantidad de errores con verificacion de tipos.


Se puede instalar las propTypes.

Los propTypes pertenecen al conjunto de paquets que gestiona NPM

para instalarlo usamos: 

                            npm install --save prop-types       // en consola


                            import PropTypes from 'prop-types'  // en el componente donde se quiera implementar


Para declara que una propiedad es un tipo especifico de JS 

las opciones:

                    - PropTypes.array
                    - PropTypes.bool
                    - PropTypes.func
                    - PropTypes.number
                    - PropTypes.object
                    - PropTypes.string
                    - PropTypes.symbol

PropTypes exporta un rango de validadores que pueden ser usados para estar seguros que la info recibida sea valida

        ex:
                            import PropTypes from 'prop-types'

                            function Saludar(props){

                                render(){
                                    return(
                                        <h1> Hola, {props.nombre}
                                        </h1>
                                    )
                                }
                            }

                            Saludar.propTypes = {
                                nombre: PropTypes.string
                            }

                            export default Saludar





DefaultProps puede ser definido como una propiedad en el propio componente, para establecer las props determinadas

que recibira el mismo

Se utiliza para props no definidas, pero no para props nulos


se debe definir una propiedad que se llame defaultProps y se le asigna un objeto literal como valor.

Dentro de ese objeto literal , se hara referencia al nombre de la propiedad y se le asignara el valor por defecto

que queres que la prop tenga

        ex:
                    function SeteoBoton(props){
                        //...
                    } 
                    SeteoBoton.defaultProps = {
                        color:'blue'
                    }





            *** Children ***


Todo lo que sucede en un componente, debe ser aclarado al momento de crear el mismo.

Children, son los hijos, los elementos que son pasados entre sus etiquetas, no como props si no como hijos 

del componente 

para indicarle:


                function Saludo (props){
                    return(
                        <div>
                            <h1>{props.titulo} </h1>
                            <p> {props.mensaje} </p>
                            { props.children }
                        </div>
                    )
                }


los children se imprimen en el mismo orden que fueron enviados

permite la posibilidad de enviar tantos hijos como desees

Es necesario cuando no sabes exactamente que elementos va a tener tu codigo


al llamarlo tendremos que utilizar etiquetas de apertura y de cierre para definir dentro el contenido que haga 

falta

                <>
                    <Saludo>
                        //codigo children
                        <h1> Publicidad </h1>
                    </Saludo>
                </>
